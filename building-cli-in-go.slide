Building Command Line Applications in Go

Jack Christensen
@j3c10
http://www.jackchristensen.com/

* Why Go for CLI Applications?

- Cross-platform
- Minimal dependencies - no interpreter or runtime
- Better stdlib than C
- Fast startup

* Argument Parsing

- os.Args
- flag
- [[https://github.com/jessevdk/go-flags]]
- [[https://github.com/codegangsta/cli]]

* os.Args

- Built-in
- Most simple
- No help printing
- Equivalent of argv in C

.code os_args_echo.go

* flag

- Built-in
- Simple
- Sub-commands take a bit of work
- No GNU style options
- Structure binding by calling functions

* flag Code

  var options struct {
    dir     string
    include string
    exclude string
    version bool
  }

  func main() {
    flag.Usage = func() {
      fmt.Fprintf(os.Stderr, "usage:  %s [options] command\n", os.Args[0])
      flag.PrintDefaults()
    }

    flag.StringVar(&options.dir, "dir", ".", "directories to watch (separate multiple directories with commas)")
    flag.StringVar(&options.include, "include", "", "only watch files matching this regexp")
    flag.StringVar(&options.exclude, "exclude", "", "don't watch files matching this regexp")
    flag.BoolVar(&options.version, "version", false, "print version and exit")
    flag.Parse()

    if options.version {
      fmt.Printf("react2fs v%v\n", Version)
      os.Exit(0)
    }

* flag Help Output

  jack@hk-3~$ react2fs
  usage:  react2fs [options] command
    -dir=".": directories to watch (separate multiple directories with commas)
    -exclude="": don't watch files matching this regexp
    -include="": only watch files matching this regexp
    -version=false: print version and exit

* github.com/jessevdk/go-flags

- GNU style options
- Structure binding by struct tags

* github.com/jessevdk/go-flags Code

  var opts struct {
    NumRequests int      `short:"r" long:"num-requests" description:"Number of requests to make" default:"1"`
    Concurrent  int      `short:"c" long:"concurrent" description:"Number of concurrent connections to make" default:"1"`
    KeepAlive   bool     `short:"k" long:"keep-alive" description:"Use keep alive connection"`
    Headers     []string `short:"H" long:"header" description:"Header to include in request (can be used multiple times)"`
    NoGzip      bool     `long:"no-gzip" description:"Disable gzip accept encoding"`
    SecureTLS   bool     `long:"secure-tls" description:"Validate TLS certificates"`
    Version     bool     `long:"version" description:"Display version and exit"`
  }

  // ...

  var err error
  var args []string

  parser := flags.NewParser(&opts, flags.Default)
  parser.Usage = "[options] URL"
  if args, err = parser.Parse(); err != nil {
    return
  }

* github.com/jessevdk/go-flags Code

  jack@hk-3~$ overload -h
  Usage:
    overload [options] URL

  Application Options:
    -r, --num-requests= Number of requests to make (1)
    -c, --concurrent=   Number of concurrent connections to make (1)
    -k, --keep-alive    Use keep alive connection
    -H, --header=       Header to include in request (can be used multiple times)
        --no-gzip       Disable gzip accept encoding
        --secure-tls    Validate TLS certificates
        --version       Display version and exit

  Help Options:
    -h, --help          Show this help message

* github.com/codegangsta/cli

- Git style subcommand support
- GNU style options
- Bash completion
- Access options by name instead of structure binding
- Opinionated about program structure

* github.com/codegangsta/cli Code


  app := cli.NewApp()
  app.Name = "tern"
  app.Usage = "PostgreSQL database migrator"
  app.Version = VERSION
  app.Author = "Jack Christensen"
  app.Email = "jack@jackchristensen.com"

* github.com/codegangsta/cli Code p. 2

  app.Commands = []cli.Command{
    // ...
    {
      Name:        "migrate",
      ShortName:   "m",
      Usage:       "migrate the database",
      Synopsis:    "[command options]",
      Description: "migrate the database to destination version",
      Flags: []cli.Flag{
        cli.StringFlag{"destination, d", "last", "Destination migration version"},
        cli.StringFlag{"migrations, m", ".", "Migrations path"},
        cli.StringFlag{"config, c", "tern.conf", "Config path"},
      },
      Action: Migrate,
    },
    // ...
  }

  app.Run(os.Args)

* github.com/codegangsta/cli Help Output


  jack@hk-3~$ tern
  NAME:
     tern - PostgreSQL database migrator

  SYNOPSIS:
     tern [global options] command [command options] [arguments...]

  VERSION:
     1.3.1

  COMMANDS:
     init, i  init a new tern project
     migrate, m migrate the database
     new, n generate a new migration
     help, h  Shows a list of commands or help for one command

  GLOBAL OPTIONS:
     --version, -v  print the version
     --help, -h   show help

* Argument Parsing Summary

- For subcommands, use [[https://github.com/codegangsta/cli]]
- For GNU-style options, use [[https://github.com/jessevdk/go-flags]]
- For Go-style options and to avoid dependencies, use flag
- For really simple arguments, use os.Args

* Really Simple File IO

Package ioutil makes basic file IO really simple.

  func ReadDir(dirname string) ([]os.FileInfo, error)
  func ReadFile(filename string) ([]byte, error)
  func WriteFile(filename string, data []byte, perm os.FileMode) error

Package os has traditional file types and functions.

- *os.File implements io.Reader and io.Writer

* Configuration with Environment Variables

- func os.Getenv(key string) string

  func extractConfig() pgx.ConnConfig {
    var config pgx.ConnConfig

    config.Host = os.Getenv("PG_HOST")
    if config.Host == "" {
      config.Host = "localhost"
    }

    config.User = os.Getenv("PG_USER")
    if config.User == "" {
      config.User = os.Getenv("USER")
    }

    config.Password = os.Getenv("PG_PASSWORD")

    config.Database = os.Getenv("PG_DATABASE")
    if config.Database == "" {
      config.Database = config.User
    }

    return config
  }

* Configuration Files

ini - [[https://github.com/vaughan0/go-ini]]

- Simple to work with
- All string data
- One level of hierarchy

YAML - [[https://github.com/go-yaml/yaml]]

- Structure binding
- Parse to map[string]interface{}
- LGPL with linking exception
- Tab vs. space

JSON - encoding/json

- JSON does not allow comments

* Syncronous Process Management

os/exec Cmd offers high-level process operations.

.code os_exec.go

* Asyncronous Process Control

os.StartProcess offers low-level process control.

- Full path to process
- Working directory
- Argv (including invocation name as first argument)
- Environment
- Files for stdin, stdout, stderr

* Example of Low-Level Process Control with React2fs

React2fs is a file system watcher that runs a process when the file system changes.

  jack@edi:~/dev/go/src/github.com/jackc/pgx$ react2fs go test
  PASS
  ok    github.com/jackc/pgx  0.499s
  2014/10/04 11:41:04 "./doc.go": CHMOD
  PASS
  ok    github.com/jackc/pgx  0.443s
  2014/10/04 11:47:01 "./hstore.go": CHMOD
  PASS
  ok    github.com/jackc/pgx  0.499s

It can also run a server and restart it when the file system changes.

- Use rake or shell script to make a single command that builds then runs server
- See https://github.com/jackc/tpr

* Process Wrapper in React2fs

  type Process struct {
    CmdPath  string
    Argv     []string
    procAttr *os.ProcAttr
    process  *os.Process
  }

* Starting a Process in React2fs

  func StartProcess(argv []string) (*Process, error) {
    var wp Process
    var err error

    wp.CmdPath, err = exec.LookPath(argv[0])
    // Snip error handling

    wp.Argv = argv

    workingDir, err := os.Getwd()
    // Snip error handling

    wp.procAttr = &os.ProcAttr{
      Dir:   workingDir,
      Files: []*os.File{nil, os.Stdout, os.Stderr},
      Env:   os.Environ(),
    }

    err = wp.Restart()
    return &wp, err
  }

* Killing a Process in React2fs p. 3

  killErr := process.Kill() // process is *os.Process

  waitDone := make(chan bool)
  waitErr := make(chan error)

  go func() {
    _, err := process.Wait()
    if err != nil {
      waitErr <- err
    } else {
      waitDone <- true
    }
  }()

  select {
  case <-waitDone:
    return nil
  case err := <-waitErr:
    return err
  case <-time.After(10 * time.Second):
    if killErr != nil {
      return killErr
    }
    return errors.New("Timeout waiting for process to terminate")
  }

* Consider Extracting Core Logic to Separate Package

- Easier to test and reuse core login
- golang.org/x/tools/present vs golang.org/x/tools/cmd/present
- go test ./...
- main() can't be called from tests

* Integration Testing

Examples using gocheck - https://labix.org/gocheck

Build binary in test setup.

  func (s *TernSuite) SetUpSuite(c *C) {
    err := exec.Command("go", "build", "-o", "tmp/tern").Run()
    c.Assert(err, IsNil)

Wrap execution in helper method.

  func (s *TernSuite) tern(c *C, args ...string) {
    cmd := exec.Command("tmp/tern", args...)
    output, err := cmd.CombinedOutput()
    if err != nil {
      c.Fatalf("tern failed with: %v\noutput:\n%v", err, string(output))
    }
  }

* Integration Testing p. 2

Tests read cleanly.

  func (s *TernSuite) TestNew(c *C) {
    path := "tmp/new"
    defer func() {
      os.RemoveAll(path)
    }()

    s.tern(c, "init", path)
    s.tern(c, "new", "-m", path, "first")

    _, err := os.Stat("tmp/new/001_first.sql")
    c.Assert(err, IsNil)

    s.tern(c, "new", "-m", path, "second")

    _, err = os.Stat("tmp/new/002_second.sql")
    c.Assert(err, IsNil)
  }

* Source Material

Examples principally drawn from following projects:

- [[https://github.com/jackc/react2fs]] Run command in reaction to file system events
- [[https://github.com/jackc/tern]] The SQL Fan's Migrator
- [[https://github.com/jackc/overload]] - HTTP load tester
- [[https://github.com/jackc/tpr]] The Pithy Reader - RSS Reader

Slides in "present" format at: [[https://github.com/jackc/chicagolang-feb-2015]]
